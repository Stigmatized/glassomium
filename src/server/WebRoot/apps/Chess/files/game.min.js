var game, sync, menu, controller;

function Game(u) {
    function k() {
        var b = a[a.length - 1],
            f = "";
        if (b && b.stalemate) f = "Stalemate!";
        else if (b && b.mate) {
            f = "Mate! ";
            f += sync ? q === sync.playerIsWhite ? "Opponent wins." : "You win." : q ? "Black wins." : "White wins."
        } else {
            if (b && b.check) f = "Check! ";
            f += sync ? q === sync.playerIsWhite ? "Your turn." : "Opponent's turn." : q ? "White's turn." : "Black's turn."
        }
        $("#currentTurn").html(f);
        if (a.length) {
            if (i[b.pieceSymbol].kind === "king" && Math.abs(b.startColumn - b.endColumn) > 1) b = b.endColumn === 3 ? "O-O-O" : "O-O";
            else {
                f = i[b.pieceSymbol].color ===
                    "white" ? b.pieceSymbol : '<span style="color: black">' + b.pieceSymbol + "</span>";
                f += String.fromCharCode(96 + b.startColumn);
                f += b.startRow;
                f += " ";
                if (b.capturedPieceSymbol) f += i[b.capturedPieceSymbol].color === "white" ? b.capturedPieceSymbol : '<span style="color: black">' + b.capturedPieceSymbol + "</span>";
                f += String.fromCharCode(96 + b.endColumn);
                f += b.endRow;
                if (b.promotionType) {
                    f += "=";
                    f += i[b.pieceSymbol].color === "white" ? b.promotionType : '<span style="color: black">' + b.promotionType + "</span>"
                } else if (b.enPassant) f += " e.p.";
                if (b.check && !b.mate) f += "+";
                if (b.mate || b.stalemate) f += "#";
                b = f
            }
            b = "Last move: " + b
        } else b = "No move yet.";
        b = b;
        $("#lastMove").html(b)
    }
    function t() {
        var b, f, d = "";
        m++;
        b = Math.floor(m / 60);
        f = m % 60;
        d += b < 10 ? "0" + b : b;
        d += ":";
        d += f < 10 ? "0" + f : f;
        $("#gameTime").html(d)
    }
    function n() {
        $(".promotion").fadeOut(300, function () {
            $(".promotion > ul > li").unbind().remove();
            $(".promotion")[0].id = "";
            $(".promotion").css("left", "")
        })
    }
    function h(b, f) {
        return $(b).data("pieceObject", f)
    }
    function l(b, f) {
        return $(b).data("fieldObject", f)
    }
    function x() {
        var b;
        q = q ? 0 : 1;
        if (h($("td > .piece.king." + (q ? "white" : "black"))).field.reachableBy[q ? "black" : "white"].length) a[a.length - 1].check = true;
        $(q ? "td > .white" : "td> .black").each(function (f, d) {
            if (h(d).accessibleFields().length) {
                b = true;
                return false
            }
        });
        if (!b) {
            if (a[a.length - 1].check) {
                a[a.length - 1].mate = true;
                $("#end > .tone100 > h2 > span:first-child").css("background-position", q ? "30% 100%" : "0 100%");
                $("#end > .tone100 > h2 > span:last-child").html(q ? "Black wins" : "White wins")
            } else {
                a[a.length - 1].stalemate = true;
                $("#end > .tone100 > h2 > span:first-child").css("background-position",
                    "60% 100%");
                $("#end > .tone100 > h2 > span:last-child").html("Stalemate")
            }
            game.gameOver = true;
            clearInterval(F)
        }
        if (a[a.length - 1].check) a[a.length - 1].mate ? controller.blink($("td > .piece.king." + (q ? "white" : "black")), 3, 1E3, function () {
            if (!menu) {
                menu = new Menu("#end");
                menu.appear(true);
            }
        }) : controller.blink($("td > .piece.king." + (q ? "white" : "black")), 2, 1E3);
        else a[a.length - 1].stalemate && controller.blink($("td > .piece.king"), 3, 1E3, function () {
            if (!menu) {
                menu = new Menu("#end");
                menu.appear(true);
            }
        });
        k();
        if (controller != null) controller.autoSave && game.updateLocalStorage();
        sync && sync.playerIsWhite !== q && sync.makeMove(a[a.length - 1])
    }
    function z(b) {
        function f() {
            if (d.kind === "king" || d.kind === "rook" && d.field.column === 1) B[d.color].queenSide = false;
            if (d.kind === "king" || d.kind === "rook" && d.field.column === 8) B[d.color].kingSide = false
        }
        var d = this;
        h(b, this);
        this.element = b;
        this.symbol = b.innerHTML;
        this.kind = i[this.symbol].kind;
        this.color = i[this.symbol].color;
        this.isWhite = this.color === "white" ? 1 : 0;
        this.field = l(b.parentNode);
        this.reachableFields = [];
        this.getReachableFields = function () {
            function c(s, r) {
                this.add = function (y, o) {
                    if (j[s + y] && j[s + y][r + o]) return this.push(j[s + y][r + o]);
                    return false
                }
            }
            c.prototype = [];
            var e = new c(this.field.column, this.field.row),
                g = d.isWhite ? +1 : -1,
                p;
            switch (this.kind) {
                case "pawn":
                    e.add(-1, g);
                    e.add(+1, g);
                    break;
                case "knight":
                    e.add(-1, +2);
                    e.add(+1, +2);
                    e.add(-1, -2);
                    e.add(+1, -2);
                    e.add(-2, +1);
                    e.add(-2, -1);
                    e.add(+2, +1);
                    e.add(+2, -1);
                    break;
                case "king":
                    e.add(-1, +1);
                    e.add(+0, +1);
                    e.add(+1, +1);
                    e.add(-1, +0);
                    e.add(+1, +0);
                    e.add(-1, -1);
                    e.add(+0, -1);
                    e.add(+1, -1);
                    break;
                case "bishop":
                case "rook":
                case "queen":
                    this.kind !== "bishop" && $.each([
                        [-1, 0],
                        [+1, 0],
                        [0, -1],
                        [0, +1]
                    ], function (s, r) {
                        for (p = 1; e.add(r[0] * p, r[1] * p); p++) if (e[e.length - 1].piece) break
                    });
                    this.kind !== "rook" && $.each([
                        [-1, +1],
                        [-1, -1],
                        [+1, +1],
                        [+1, -1]
                    ], function (s, r) {
                        for (p = 1; e.add(r[0] * p, r[1] * p); p++) if (e[e.length - 1].piece) break
                    })
            }
            return e
        };
        this.captureableFields = function () {
            var c = [];
            $.each(this.reachableFields, function (e, g) {
                if (g.piece) g.piece.isWhite !== d.isWhite && c.push(g);
                else d.kind !== "pawn" && c.push(g)
            });
            return c
        };
        this.accessibleFields = function () {
            var c = this.captureableFields(),
                e = d.isWhite ? 1 : -1,
                g = d.isWhite ? 1 : 8,
                p, s = h($("td > .piece.king." + (q ? "white" : "black"))),
                r = s.field.reachableBy[this.isWhite ? "black" : "white"],
                y, o, H;
            switch (this.kind) {
                case "pawn":
                    j[this.field.column][this.field.row + e] && !j[this.field.column][this.field.row + e].piece && c.push(j[this.field.column][this.field.row + e]);
                    this.field.row === g + e && !j[this.field.column][this.field.row + e].piece && !j[this.field.column][this.field.row + e * 2].piece && c.push(j[this.field.column][this.field.row + e * 2]);
                    this.field.row === g + e * 4 && a.length && i[a[a.length - 1].pieceSymbol].kind === "pawn" && a[a.length - 1].endRow === this.field.row && Math.abs(a[a.length - 1].startRow - a[a.length - 1].endRow) === 2 && Math.abs(a[a.length - 1].startColumn - this.field.column) === 1 && c.push(j[a[a.length - 1].startColumn][this.field.row + e]);
                    break;
                case "king":
                    if (B[this.color].queenSide && j[1][g].piece && j[1][g].piece.kind === "rook" && !j[2][g].piece && !j[3][g].piece && !j[4][g].piece && !j[3][g].reachableBy[d.isWhite ? "black" : "white"].length && !j[4][g].reachableBy[d.isWhite ?
                        "black" : "white"].length && !j[5][g].reachableBy[d.isWhite ? "black" : "white"].length) c.push(j[3][g]);
                    if (B[this.color].kingSide && j[8][g].piece && j[8][g].piece.kind === "rook" && !j[6][g].piece && !j[7][g].piece && !j[7][g].reachableBy[d.isWhite ? "black" : "white"].length && !j[6][g].reachableBy[d.isWhite ? "black" : "white"].length && !j[5][g].reachableBy[d.isWhite ? "black" : "white"].length) c.push(j[7][g]);
                    p = c;
                    c = [];
                    $.each(p, function (E, w) {
                        if (!w.reachableBy[d.isWhite ? "black" : "white"].length) {
                            $.each(r, function (J, C) {
                                d.field.inBetween(C.field,
                                w) || c.push(w)
                            });
                            r.length || c.push(w)
                        }
                    });
                    return c
            }
            if (r.length) {
                p = c;
                c = [];
                if (r.length > 1) return [];
                else $.each(p, function (E, w) {
                    if (r[0].kind === "bishop" || r[0].kind === "rook" || r[0].kind === "queen") w.inBetween(s.field, r[0].field) && c.push(w);
                    w === r[0].field && c.push(w)
                })
            } else $.each([
                [-1, 0],
                [+1, 0],
                [0, -1],
                [0, +1],
                [-1, +1],
                [-1, -1],
                [+1, +1],
                [+1, -1]
            ], function (E, w) {
                if (!j[d.field.column + w[0]] || !(o = j[d.field.column + w[0]][d.field.row + w[1]])) return true;
                if (d.field.inBetween(o, s.field)) for (y = 1; j[s.field.column + w[0] * y] && (o = j[s.field.column + w[0] * y][s.field.row + w[1] * y]); y++) if (o.piece) if (o.piece === d) H = true;
                else {
                    if (H && o.piece.isWhite !== d.isWhite && (o.piece.kind === "queen" || o.piece.kind === "bishop" && E > 3 || o.piece.kind === "rook" && E < 4)) {
                        p = c;
                        c = [];
                        $.each(p, function (J, C) {
                            if (C.inBetween(s.field, o) || C === o) c.push(C)
                        })
                    }
                    return false
                }
            });
            return c
        };
        this.updateReachables = function () {
            $.each(this.reachableFields, function (c, e) {
                c = e.reachableBy[d.color].indexOf(d);
                c !== -1 && e.reachableBy[d.color].splice(c, 1)
            });
            if (!this.field) return false;
            this.reachableFields = this.getReachableFields();
            $.each(this.reachableFields, function (c, e) {
                e.reachableBy[d.color].push(d)
            })
        };
        this.moveToCemetery = function () {
            this.kind === "rook" && f();
            this.moveInDOM($("<li />").appendTo($("#" + this.color + "Cemetery")), true, true);
            $(b).hasClass("ui-draggable") && $(b).draggable("destroy")
        };
        this.move = function (c, e) {
            var g;
            a.push({
                startColumn: d.field.column,
                startRow: d.field.row,
                endColumn: c.column,
                endRow: c.row,
                pieceSymbol: d.symbol
            });
            g = j[c.column][c.row].piece;
            if (d.kind === "pawn" && d.field.column !== c.column && !g) {
                g = j[c.column][c.row + (d.isWhite ? -1 : 1)].piece;
                a[a.length - 1].enPassant = true
            }
            if (g) {
                a[a.length - 1].capturedPieceSymbol = g.symbol;
                g.moveToCemetery()
            }
            if ((d.symbol === "\u2654" && c.row === 1 || d.symbol === "\u265a" && c.row === 8) && (c.column === 3 && B[d.color].queenSide || c.column === 7 && B[d.color].kingSide)) {
                g = {};
                g.row = d.symbol === "\u2654" ? 1 : 8;
                g.startColumn = c.column === 3 ? 1 : 8;
                g.endColumn = c.column === 3 ? 4 : 6;
                g.tower = j[g.startColumn][g.row].piece;
                g.tower.moveInDOM(j[g.endColumn][g.row].element, true)
            }
            if (d.kind === "rook" || d.kind === "king") f();
            d.moveInDOM(c.element);
            if (d.symbol === "\u2659" && c.row === 8 || d.symbol === "\u265f" && c.row === 1) return d.promote(e);
            x()
        };
        this.animateMove = function (c, e) {
            if (G_ANIMATIONS){
                $(b).css("position", "relative").animate({
                    left: $(c.element).offset().left - $(this.field.element).offset().left,
                    top: $(c.element).offset().top - $(this.field.element).offset().top
                }, 1E3, "easeInOutQuad", function () {
                    d.move(c, e);
                    if (D) D = false;
                })                
            }else{
                d.move(c, e);
                if (D) D = false;
            }
        };
        this.startDragging = function () {
            var c;
            $("#board td").removeClass("acceptable").unbind("click");
            if (q !== this.isWhite || D || a[a.length - 1] && (a[a.length - 1].mate || a[a.length - 1].stalemate) || $(".promotion").is(":visible")) return false;
            $("#board td").droppable("option", "accept", "");
            c = this.accessibleFields();
            $.each(c, function (e, g) {
                $(g.element).droppable("option", "accept", ".piece")
            });
            return true
        };
        this.clickPiece = function () {
            function c() {
                $("#board td").removeClass("acceptable").unbind("click")
            }
            if (q !== this.isWhite || D || a[a.length - 1] && (a[a.length - 1].mate || a[a.length - 1].stalemate) || $(".promotion").is(":visible")) return true;
            c();
            $("#board td").click(function () {
                c()
            });
            $.each(this.accessibleFields(),

            function (e, g) {
                $(g.element).addClass("acceptable");
                $(g.element).click(function () {
                    D = true;
                    c();
                    d.animateMove(g)
                })
            });
            return false
        };
        this.promote = function (c) {
            if (c) {
                d.symbol = b.innerHTML = c;
                d.kind = i[c].kind;
                a[a.length - 1].promotionType = c;
                v[a[a.length - 1].endColumn][a[a.length - 1].endRow] = c;
                d.updateReachables();
                x();
                n();
                controller.flip(b, "horizontal", 1E3, function () {
                    $(b).removeClass("pawn");
                    $(b).addClass(d.kind)
                })
            } else {
                $.each(this.isWhite ? ["\u2658", "\u2657", "\u2656", "\u2655"] : ["\u265e", "\u265d", "\u265c", "\u265b"],

                function (e, g) {
                    $('<li><div class="piece ' + i[g].color + " " + i[g].kind + '">' + g + "</div></li>").appendTo($(".promotion > ul")).click(function () {
                        d.promote(g)
                    })
                });
                c = sync ? !sync.playerIsWhite : 0;
                $(".promotion")[0].id = this.isWhite || c ? "top" : "bottom";
                $(".promotion").css("left", -130 + 60 * Math.abs(this.field.column - 9 * c) + "px");
                $(".promotion").fadeIn(300)
            }
        };
        this.moveInDOM = function (c, e, g) {
            var p, s, r;
            p = this.field.reachableBy.white.concat(this.field.reachableBy.black);
            v[this.field.column][this.field.row] = "";
            this.field = this.field.piece = undefined;
            $.each(p, function (y, o) {
                if (o.kind === "bishop" || o.kind === "rook" || o.kind === "queen") o.updateReachables()
            });
            if (e) {
                s = $(b).offset().left;
                r = $(b).offset().top
            }
            $(c).append(b);
            if (e) {
                g && controller != null && controller.spin(b, 1E3);
                $(b).css({
                    position: "relative",
                    left: (s - $(b).offset().left) / G_ZOOM_LEVEL + "px",
                    top: (r - $(b).offset().top) / G_ZOOM_LEVEL + "px"
                }).animate({
                    left: "0",
                    top: "0"
                }, 1E3, "easeInOutQuad")
            } else $(b).css({
                left: "0",
                top: "0"
            });
            if (l(c)) {
                v[l(c).column][l(c).row] = this.symbol;
                this.field = l(c);
                this.field.piece = this;
                $.each(this.field.reachableBy.white.concat(this.field.reachableBy.black),

                function (y, o) {
                    if (o.kind === "bishop" || o.kind === "rook" || o.kind === "queen") o.updateReachables()
                })
            }
            this.updateReachables()
        }
    }
    function A(b) {
        l(b, this);
        this.element = b;
        this.column = parseInt(b.id.substr(0, 1), 10);
        this.row = parseInt(b.id.substr(1, 1), 10);
        this.piece = b.firstChild ? h(b.firstChild) : undefined;
        this.reachableBy = {
            white: [],
            black: []
        };
        this.createPiece = function (f) {
            this.piece = new z($('<div class="piece ' + i[f].color + " " + i[f].kind + '">' + f + "</div>").appendTo(b)[0])
        };
        this.inBetween = function (f, d) {
            if (f.column === d.column && this.column === f.column) return this.row < f.row && this.row > d.row || this.row > f.row && this.row < d.row;
            else if (f.row === d.row && this.row === f.row) return this.column < f.column && this.column > d.column || this.column > f.column && this.column < d.column;
            else if (Math.abs(f.column - d.column) === Math.abs(f.row - d.row)) return Math.abs(f.column - this.column) === Math.abs(f.row - this.row) && Math.abs(f.column - this.column) < Math.abs(f.column - d.column) && Math.abs(d.column - this.column) < Math.abs(f.column - d.column) && Math.abs(f.row - this.row) < Math.abs(f.row - d.row) && Math.abs(d.row - this.row) < Math.abs(f.row - d.row);
            return false
        }
    }
    var i = {
        "\u2659": {
            color: "white",
            kind: "pawn"
        },
        "\u2658": {
            color: "white",
            kind: "knight"
        },
        "\u2657": {
            color: "white",
            kind: "bishop"
        },
        "\u2656": {
            color: "white",
            kind: "rook"
        },
        "\u2655": {
            color: "white",
            kind: "queen"
        },
        "\u2654": {
            color: "white",
            kind: "king"
        },
        "\u265f": {
            color: "black",
            kind: "pawn"
        },
        "\u265e": {
            color: "black",
            kind: "knight"
        },
        "\u265d": {
            color: "black",
            kind: "bishop"
        },
        "\u265c": {
            color: "black",
            kind: "rook"
        },
        "\u265b": {
            color: "black",
            kind: "queen"
        },
        "\u265a": {
            color: "black",
            kind: "king"
        }
    }, m = 0,
        a = [],
        v, q = 1,
        B = {
            white: {
                queenSide: true,
                kingSide: true
            },
            black: {
                queenSide: true,
                kingSide: true
            }
        }, j = {}, F, I, G, D;
    (function () {
        var b, f, d;
        b = sync ? sync.playerIsWhite : 1;
        $("#board td").each(function (c, e) {
            f = Math.abs(Math.floor(c / 8) - 7 * b) + 1;
            d = Math.abs(c % 8 - 7 * Math.abs(b - 1)) + 1;
            e.setAttribute("id", d + "" + f);
            j[d] = j[d] || {};
            j[d][f] = new A(e)
        });
        $("th").each(function (c, e) {
            e.innerHTML = c < 8 ? Math.abs(c - 7 * b) + 1 : String.fromCharCode(96 + Math.abs(c - 8 - 7 * Math.abs(b - 1)) + 1)
        });
        if (u) {
            q = u.whitesTurn;
            v = u.gameState;
            B = u.castlingAllowed;
            m = u.gameTime;
            a = u.moves;
            $.each(a, function (c, e) {
                e.capturedPieceSymbol && $('<li><div class="piece ' + i[e.capturedPieceSymbol].color + " " + i[e.capturedPieceSymbol].kind + '">' + e.capturedPieceSymbol + "</div></li>").appendTo($("#" + i[e.capturedPieceSymbol].color + "Cemetery"))
            });
            if (a.length && (a[a.length - 1].mate || a[a.length - 1].stalemate)) {
                G = true;
                if (a[a.length - 1].mate) {
                    $("#end > .tone100 > h2 > span:first-child").css("background-position", q ? "30% 100%" : "0 100%");
                    $("#end > .tone100 > h2 > span:last-child").html(q ? "Black wins" :
                        "White wins")
                } else {
                    $("#end > .tone100 > h2 > span:first-child").css("background-position", "60% 100%");
                    $("#end > .tone100 > h2 > span:last-child").html("Stalemate")
                }
            }
        }
        v = v || {
            1: {
                1: "\u2656",
                2: "\u2659",
                7: "\u265f",
                8: "\u265c"
            },
            2: {
                1: "\u2658",
                2: "\u2659",
                7: "\u265f",
                8: "\u265e"
            },
            3: {
                1: "\u2657",
                2: "\u2659",
                7: "\u265f",
                8: "\u265d"
            },
            4: {
                1: "\u2655",
                2: "\u2659",
                7: "\u265f",
                8: "\u265b"
            },
            5: {
                1: "\u2654",
                2: "\u2659",
                7: "\u265f",
                8: "\u265a"
            },
            6: {
                1: "\u2657",
                2: "\u2659",
                7: "\u265f",
                8: "\u265d"
            },
            7: {
                1: "\u2658",
                2: "\u2659",
                7: "\u265f",
                8: "\u265e"
            },
            8: {
                1: "\u2656",
                2: "\u2659",
                7: "\u265f",
                8: "\u265c"
            }
        };
        $.each(j, function (c, e) {
            $.each(e, function (g) {
                v[c] && v[c][g] && j[c][g].createPiece(v[c][g])
            })
        });
        $("td > .piece").each(function (c, e) {
            h(e).updateReachables()
        });
        $("td > .white.knight:first, td > .black.knight:first").css("-moz-transform", "scaleX(-1)");
        $("td > .white.knight:first, td > .black.knight:first").css("-webkit-transform", "scaleX(-1)");
        $("td > .white.knight:first, td > .black.knight:first").css("-o-transform", "scaleX(-1)");
        $("td > .white.knight:first, td > .black.knight:first").css("-ms-transform",
            "scaleX(-1)");
        $("td > .piece").each(function (c, e) {
            if (!sync || sync.playerIsWhite === h(e).isWhite) {
                $(e).draggable({
                    containment: $("#board"),
                    revert: "invalid",
                    start: function (g, p) {
                        return h(p.helper[0]).startDragging()
                    }
                });
                $(e).click(function () {
                    return h(this).clickPiece()
                })
            }
        });
        $("#board td").droppable({
            addClasses: false,
            accept: "",
            activeClass: "acceptable",
            drop: function (c, e) {
                return h(e.draggable[0]).move(l(this))
            }
        });
        $("#border").hover(function () {
            menu || (I = setTimeout(function () {
                $("#border table").fadeIn(300)
            }, 500))
        },

        function () {
            $("#border table").fadeOut(300);
            clearInterval(I)
        });
        k();
        t();
        $("#info").height() === 540 && $("#info").clearQueue().animate({
            height: "570px"
        }, 100, "easeInQuad");
        G || (F = setInterval(function () {
            t()
        }, 1E3))
    })();
    return {
        gameOver: G,
        deinit: function () {
            localStorage.clear();
            if (!controller.autoSave) localStorage.noAutoSave = true;
            n();
            $(".piece").fadeOut(300, function () {
                $(this).parent("li").remove();
                $(this).remove()
            });
            $(".ui-draggable").draggable("destroy");
            $("#board td").droppable("destroy");
            clearInterval(F);
            $("#info").height() === 570 && $("#info").clearQueue().animate({
                height: "540px"
            }, 100, "easeOutQuad");
            $("#border").unbind()
        },
        fieldIsTaken: function (b, f) {
            if (j[b] && j[b][f] && j[b][f].piece) return true;
            return false
        },
        receiveCoordinates: function (b, f, d, c, e, g) {
            var p, s, r;
            b = document.getElementById(b + "" + f);
            p = document.getElementById(d + "" + c);
            s = b.firstChild;
            if (!b || !p || !s) return false;
            $.each(h(s).accessibleFields(), function (y, o) {
                if (l(p) === o) r = true
            });
            g ? controller.blink(s, 2, 1E3, function () {
                h(s).animateMove(l(p), e)
            }) : h(s).animateMove(l(p), e);
            return r ? true : false
        },
        updateLocalStorage: function () {
            localStorage.whitesTurn = q;
            localStorage.gameState = JSON.stringify(v);
            localStorage.castlingAllowed = JSON.stringify(B);
            localStorage.gameTime = m;
            localStorage.moves = JSON.stringify(a)
        }
    }
}

function Sync() {
    function u() {
        document.title = document.title === "PlainChess" && !n ? "Your turn!" : "PlainChess";
        n || setTimeout(function () {
            u()
        }, 1E3)
    }
    var k, t, n = 1;
    (function () {
        $(window).focus(function () {
            n = 1
        });
        $(window).blur(function () {
            n = 0
        })
    })();
    return {
        playerIsWhite: 1,
        deinit: function () {
            clearInterval(t);
            $(window).unbind()
        },
        hostGame: function (h) {
            $.post("php/hostGame.php", {
                id: h
            }, function (l) {
                if (l) {
                    k = l;
                    $("#hostGame > input[type='button']")[0].value = "";
                    $("#hostGame > input[type='button']").css("background", "#5a4232 url(img/ajax-loader.gif) center no-repeat");
                    $("input[type='text']").attr("readonly", "readonly");
                    $("input[type='button']").attr("disabled", "disabled");
                    menu.deinit();
                    t = setInterval(function () {
                        sync.waitForStart()
                    }, 5E3);
                    localStorage.gameName = k;
                    localStorage.playerIsWhite = sync.playerIsWhite
                } else menu.error(document.getElementById("hostGameName"), "Name already taken\u2026")
            })
        },
        joinGame: function (h) {
            $.post("php/joinGame.php", {
                id: h
            }, function (l) {
                if (l) {
                    sync.playerIsWhite = 0;
                    k = l;
                    game = new Game;
                    menu.disappear(true);
                    t = setInterval(function () {
                        sync.waitForMove()
                    },
                    5E3);
                    localStorage.gameName = k;
                    localStorage.playerIsWhite = sync.playerIsWhite
                } else menu.error(document.getElementById("joinGameName"), "Game not hosted\u2026")
            })
        },
        resumeGame: function () {
            if (!localStorage.gameName || !localStorage.playerIsWhite) return false;
            k = localStorage.gameName;
            sync.playerIsWhite = parseInt(localStorage.playerIsWhite, 10);
            if (localStorage.whitesTurn !== sync.playerIsWhite) t = setInterval(function () {
                sync.waitForMove()
            }, 5E3)
        },
        waitForStart: function () {
            $.post("php/waitForStart.php", {
                id: k
            }, function (h) {
                if (h ===
                    "joined") {
                    u();
                    menu.disappear(true);
                    game = new Game;
                    clearInterval(t)
                }
            })
        },
        waitForMove: function () {
            function h(m) {
                game.receiveCoordinates(l, x, z, A, i, m) || alert("Invalid move received, maybe due to cheating. Games might be out of sync, restart is recommended.")
            }
            var l, x, z, A, i;
            $.post("php/waitForMove.php", {
                id: k
            }, function (m) {
                if (m !== "joined") {
                    l = parseInt(m.substr(0, 1), 10);
                    x = parseInt(m.substr(1, 1), 10);
                    z = parseInt(m.substr(3, 1), 10);
                    A = parseInt(m.substr(4, 1), 10);
                    if (m.substr(6, 1)) i = m.substr(6, 1);
                    if (game.fieldIsTaken(l,
                    x)) {
                        clearInterval(t);
                        if (n) h(0);
                        else {
                            u();
                            $(window).focus(function () {
                                n = 1;
                                h(1);
                                $(window).unbind("focus");
                                $(window).focus(function () {
                                    n = 1
                                })
                            })
                        }
                    }
                }
            })
        },
        makeMove: function (h) {
            $.post("php/makeMove.php", {
                id: k,
                startColumn: h.startColumn,
                startRow: h.startRow,
                endColumn: h.endColumn,
                endRow: h.endRow,
                promotionType: h.promotionType
            }, function (l) {
                if (l) t = setInterval(function () {
                    sync.waitForMove()
                }, 5E3);
                else alert("Error occured during sync! Game might have ended!")
            })
        }
    }
}

function Menu(u) {
    function k(i) {
        if (A) return false;
        h.each(function (m, a) {
            $(a).children().clearQueue();
            i === m + 1 || !i ? $(a).children().fadeTo(300, 1) : $(a).children().fadeTo(300, 0.3)
        })
    }
    function t() {
        var i;
        n.mouseleave(function () {
            k(0)
        });
        h.each(function (m, a) {
            if (a.id) {
                $(a).mouseenter(function () {
                    k(m + 1)
                });
                $(a).click(function () {
                    $(a).children("input[type='text']").focus();
                    k(m + 1)
                })
            } else $(a).mouseenter(function () {
                k(0)
            });
            $(a).children().each(function (v, q) {
                $(q).focus(function () {
                    k(m + 1);
                    A = 1
                });
                $(q).blur(function () {
                    A = 0;
                    k(0)
                })
            })
        });
        l.each(function (m, a) {
            $(a).focus(function () {
                if (a.value === a.getAttribute("value")) a.value = ""
            });
            $(a).blur(function () {
                if (a.value === "" || $(a).hasClass("error")) {
                    a.value = a.getAttribute("value");
                    $(a).removeClass("error")
                }
            });
            $(a).keypress(function (v) {
                i = v.keyCode ? v.keyCode : v.which;
                if (i !== 13) {
                    if ($(a).hasClass("error")) {
                        a.value = "";
                        $(a).removeClass("error");
                        return true
                    }
                    return true
                }
                menu.menuOption(a.parentNode.id)
            })
        });
        x.each(function (m, a) {
            $(a).click(function () {
                menu.menuOption(a.parentNode.id)
            })
        });
        z.each(function (m,
        a) {
            $(a).click(function () {
                menu.menuOption(a.parentNode.parentNode.id);
                return false
            })
        });
        menu.initialized = true
    }
    var n, h, l, x, z, A;
    n = $(u);
    h = n.children();
    l = h.children("input[type='text']");
    x = h.children("input[type='button']");
    z = h.children("h2").children("a");
    A = 0;
    return {
        name: u,
        initialized: false,
        deinit: function () {
            n.unbind();
            $(h).unbind();
            $(h).children().unbind();
            $(z).unbind()
        },
        appear: function (i) {
            n.show();
            i ? h.each(function (m, a) {
                $(a).css("left", "-480px").animate({
                    left: "0"
                }, 500 + m * 100, "easeOutQuad", function () {
                    m === h.length - 1 && t()
                })
            }) : t()
        },
        disappear: function (i) {
            function m() {
                n.hide();
                if (menu) menu = undefined;
                $("input[type='text']")[0].value = $("input[type='text']")[0].getAttribute("value");
                $("#hostGame > input[type='button']")[0].value = "Go";
                $("#hostGame > input[type='button']").css("background", "");
                $("input[type='text']").attr("readonly", "");
                $("input[type='button']").attr("disabled", "")
            }
            menu.deinit();
            i ? h.each(function (a, v) {
                $(v).animate({
                    left: "480px"
                }, 400 + 100 * (h.length - a), "easeInQuad", function () {
                    a || m()
                })
            }) : m();
            if (menu) menu.initialized = false
        },
        error: function (i, m) {
            i.value = m;
            $(i).addClass("error").focus().caret(0, 0)
        },
        menuOption: function (i) {
            switch (i) {
                case "hostGame":
                    i = document.getElementById("hostGameName").value.trim();
                    if (!i || i === "Host game named\u2026" || i === "Enter game name\u2026" || i === "Name already taken\u2026") return menu.error(document.getElementById("hostGameName"), "Enter game name\u2026");
                    sync = new Sync;
                    sync.hostGame(i);
                    break;
                case "joinGame":
                    i = document.getElementById("joinGameName").value.trim();
                    if (!i || i === "Join game named\u2026" || i === "Enter game name\u2026" || i === "Game not hosted\u2026") return menu.error(document.getElementById("joinGameName"), "Enter game name\u2026");
                    sync = new Sync;
                    sync.joinGame(i);
                    break;
                case "playOffline":
                    game = new Game;
                    menu.disappear(true);
                    break;
                case "toggleAutoSave":
                    if (sync) break;
                    controller.autoSave = controller.autoSave ? false : true;
                    if (controller.autoSave) {
                        delete localStorage.noAutoSave;
                        game.updateLocalStorage()
                    } else localStorage.noAutoSave = true;
                    $("#toggleAutoSave > h2 > a > span:last-child").html(controller.autoSave ?
                        "on" : "off");
                    controller.flip($("#pause > .tone55 > h2 span:first-child"), "horizontal", 250, function () {
                        $("#pause > .tone55 > h2 span:first-child").css("background-position", controller.autoSave ? "60% 57.14%" : "100% 85.71%")
                    });
                    break;
                case "playOn":
                    menu.disappear(true);
                    break;
                case "quitGame":
                    game = game.deinit();
                    if (sync) sync = sync.deinit();
                    menu = menu.disappear();
                    menu = new Menu("#start");
                    menu.appear(true)
            }
        }
    }
}
controller = function () {
    function u(k) {
        if ($("#toggleFaq").hasClass("active")) {
            $("#toggleFaq").click();
            return false
        }
        if (menu) menu.name !== "#start" && menu.initialized && menu.disappear(k);
        else {
            menu = new Menu(game.gameOver ? "#end" : "#pause");
            menu.appear(k)
        }
    }(function () {
        var k;
        if (localStorage != null && (localStorage.gameState || localStorage.gameName)) {
            if (localStorage.gameState) {
                k = {};
                k.whitesTurn = parseInt(localStorage.whitesTurn, 10);
                k.gameTime = parseInt(localStorage.gameTime, 10);
                try {
                    k.gameState = JSON.parse(localStorage.gameState);
                    k.castlingAllowed = JSON.parse(localStorage.castlingAllowed);
                    k.moves = JSON.parse(localStorage.moves)
                } catch (t) {
                    localStorage.clear();
                    delete k
                }
            }
            if (localStorage.gameName) {
                sync = new Sync;
                sync.resumeGame()
            }
            game = new Game(k);
            u(false)
        } else {
            menu = new Menu("#start");
            menu.appear()
        }
        $("h1 a").click(function () {
            u(true);
            return false
        });
        $(document).keypress(function (n) {
            if (n.keyCode === 27 || n.which === 27) {
                u(true);
                return false
            }
        });
        $("#toggleFaq").click(function () {
            $("#toggleFaq").toggleClass("active");
            $("#flip").toggleClass("flipped");
            return false
        });
        $("#contact").click(function () {
            $("#contact").unbind();
            controller.flip($("#contact"), "vertical", 250, function () {
                $("#contact").html("tim.woelfle@web.de");
                $("#contact").attr("href", "mailto:tim.woelfle@web.de?subject=PlainChess")
            });
            return false
        });
        if (localStorage != null && localStorage.noAutoSave && !sync) {
            $("#toggleAutoSave > h2 > a > span:last-child").html("off");
            $("#pause > .tone55 > h2 span:first-child").css("background-position", "100% 85.71%")
        }
    })();
    return {
        autoSave: false, //localStorage.noAutoSave && !sync ? false : true,
        blink: function (k,
        t, n, h) {
            $(k).animate({
                opacity: "0"
            }, n / 2, "easeOutQuad", function () {
                $(k).animate({
                    opacity: "1"
                }, n / 2, "easeInQuad", function () {
                    if (t > 1) controller.blink(k, t - 1, n, h);
                    else $.isFunction(h) && h()
                })
            })
        },
        spin: function (k, t) {
            var n = (document.body || document.documentElement).style,
                h = n.WebkitTransition !== undefined ? "-webkit-" : n.MozTransition !== undefined ? "-moz-" : n.OTransition !== undefined ? "-o-" : "";
            $(k).css(h + "transition-property", h + "transform").css(h + "transition-duration", t + "ms").css(h + "transition-timing-function", "ease-out");
            setTimeout(function () {
                $(k).css(h + "transform", "rotate(360deg)")
            })
        },
        flip: function (k, t, n, h) {
            var l = (document.body || document.documentElement).style,
                x = l.WebkitTransition !== undefined ? "-webkit-" : l.MozTransition !== undefined ? "-moz-" : l.OTransition !== undefined ? "-o-" : "",
                z = l.WebkitTransition !== undefined ? "webkitTransitionEnd" : l.OTransition !== undefined ? "oTransitionEnd" : "transitionend";
            if (l.WebkitTransition !== undefined || l.MozTransition !== undefined || l.OTransition !== undefined || l.transition !== undefined) $(k).bind(z, function () {
                $(k).unbind(z);
                $(k).css(x + "transition-timing-function", "ease-out").removeClass(t);
                $.isFunction(h) && h()
            }).css(x + "transition-property", x + "transform").css(x + "transition-duration", n / 2 + "ms").css(x + "transition-timing-function", "ease-in").addClass(t);
            else $.isFunction(h) && h()
        }
    }
}();