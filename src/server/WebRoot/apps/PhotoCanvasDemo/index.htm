<!DOCTYPE HTML>
<html style="overflow: hidden;">
  <head>
    <title>PhotoCanvas</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="HTML5 Multi Touch Photo Viewer">
    <meta name="author" content="Piero Toffanin">
    <!-- Styles -->
    <link href="css/bootstrap.css" rel="stylesheet">
    <link href="css/responsive.css" rel="stylesheet">
    <link href="css/modern.css" rel="stylesheet">
    <!-- Google Web Font-->
    <link href='http://fonts.googleapis.com/css?family=Dosis:300,400,600' rel='stylesheet' type='text/css'>
    <!--[if lt IE 9]>
        <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <!-- fav icons -->
    <link rel="shortcut icon" href="img/favicon.ico">

    <style>
      body {
        margin: 0px;
        padding: 0px;
      }

    </style>
    <script src="js/kinetic-v3.10.5.min.js"></script>
    <script src="js/jquery-1.7.2.js"></script>
    <script src="js/jquery.validate.js"></script>
    <script src="js/bootstrap-tooltip.js"></script>
    <script src="js/bootstrap-popover.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/magicgesture.js"></script>
    <script>
    document.addEventListener('GLALoad', onGLALoad, false);
    function onGLALoad(event) {
      GLA.SetTuioEnabled(true);
    }

    var stage;
    var serverImageList = [];

    function pool(){
      $.ajax({
        type: "GET",
        data: {"action":"getImageList"},
        dataType: 'json',
        url: "servlet",
        error: function(xhr, statusText) { },
        success: function(imageList){
          if (imageList.length == 0){
            stage.clear();
          }else if (serverImageList.length != imageList.length){
            stage.clear();
            for (var i = 0; i < imageList.length; i++){
              addImage("photo?id=" + imageList[i]);
            }

          }
          
          serverImageList = imageList;
        }
      });  
    }

    var findLayerAt = function(pageX, pageY){
          var intersections = stage.getIntersections({x:pageX, y:pageY});
          if (intersections.length > 0){
            return intersections[intersections.length - 1].getParent();
          }else{ 
            return null;
          }
    };

    window.onload = function() {
      initPhotoCanvas();

      $(".dropdown-open").click(function(event){
        event.stopPropagation();
        $(this).nextAll(".dropdown-menu").each(function(index){
          if (!($(this).hasClass("open"))){
            $(this).addClass("open");
          }
        })
      });

      $(document).click(function(){
          $(".dropdown-menu.open").removeClass("open");
      });
    };

    function initPhotoCanvas(){
      stage = new Kinetic.Stage({
        container: "canvas",
        width: $(document).width() - 4,
        height: $(document).height() - 4,
      });

      pool();
      setInterval("pool();", 3000);

      MagicGesture.init(
        findLayerAt,
        function(id){
          var elements = stage.get('#' + id);
          return elements[0];
        },
        function(element){
          return element.getId();
        }
      );
    }

    function addImage(url){
      var layer = new Kinetic.Layer({id:PseudoGuid.GetNew(), alpha:0});

      var imageObj = new Image();
      imageObj.onload = function() {

        var width = this.width;
        var height = this.height;
        var ratio = width / height;
        var maxDimension = 4;
        if (width > $(window).width() / maxDimension){
          width = $(window).width() / maxDimension;
          height = width / ratio;
        }else if (height > $(window).height() / maxDimension){
          height = $(window).height() / maxDimension;
          width = height * ratio;
        }


        var rotation = Math.random() * 360;

        var kImage = new Kinetic.Image({
          x: Math.random()*(stage.getWidth() - 100),
          y: Math.random()*(stage.getHeight() - 100),
          image: imageObj,
          width: width,
          height: height,
          alpha: 1,
          offset: [width / 2, height / 2],
          rotationDeg: rotation,
          name: "picture",
        });

        layer.add(kImage);
        stage.add(layer);

        layer.transitionTo({alpha:1, duration:0.5});
      };
      imageObj.src = url;
    }

var piles = {};
var width = $(window).width();
var height = $(window).height();
piles[1] = [{x:width/2, y:height/2}];
piles[2] = [{x:width/4, y:height/2}, {x:width/4 * 3, y:height/2}];
piles[3] = [{x:width/4, y:height/4}, {x:width/4 * 3, y:height/4}, {x:width/2, y:height/4 * 3}];
piles[4] = [{x:width/4, y:height/4}, {x:width/4 * 3, y:height/4}, {x:width/4, y:height/4 * 3}, {x:width/4 * 3, y:height/4 * 3}];

function makePile(number){
    if (number < 1) number = 1;
    if (number > 4) number = 4;

    var pictures = stage.get(".picture");
    var pile = piles[number];

    if (pictures.length > 0){
      for (var i in pictures){
        var image = pictures[i];

        var pilePosition = pile[i % number];
        var rotation = Math.random() * 0.3;
        console.log("Width: " + image.getWidth());
        if (image.getWidth() > image.getHeight()) rotation += Math.PI / 2;

        image.transitionTo({
            x: pilePosition.x,
            y: pilePosition.y,
            rotation: rotation,
            duration: 1,
        });
      }
    } 
}


//http://stackoverflow.com/questions/226689/unique-element-id-even-if-element-doesnt-have-one
var PseudoGuid = new (function() {
    this.empty = "00000000-0000-0000-0000-000000000000";
    this.GetNew = function() {
        var fourChars = function() {
                return (((1 + Math.random()) * 0x10000)|0).toString(16).substring(1).toUpperCase();
        }
        return (fourChars() + fourChars() + "-" + fourChars() + "-" + fourChars() + "-" + fourChars() + "-" + fourChars() + fourChars() + fourChars());
    };
})();

document.addEventListener("gesturestart", gestureStart, false);
document.addEventListener("gesturechange", gestureChange, false);
document.addEventListener("gestureend", gestureEnd, false);
function gestureChange(e){
    e.preventDefault();
    var layer = e.magicTarget;
    var image = layer.getChildren()[0];
    
    image.setRotationDeg(e.rotation + image.rotationOnGestureStart);
    var scale = e.scale - 1.0;
    image.setScale(image.scaleOnGestureStart + scale, image.scaleOnGestureStart + scale);
    layer.draw();
}
function gestureStart(e){
    e.preventDefault();
    var layer = e.magicTarget;
    var image = layer.getChildren()[0];

    image.rotationOnGestureStart = image.getRotationDeg();
    image.scaleOnGestureStart = image.getScale().x;
}
function gestureEnd(e){
    e.preventDefault();
}

document.addEventListener('touchstart', onTouchStart, false);
document.addEventListener('touchmove', onTouchMove, false);
document.addEventListener('touchend', onTouchEnd, false);

var touchLayer = {};

function onTouchStart(e){
  if (e.magic){
    var layer = e.magicTarget;
    var touch = e.touch;
    if (layer){
      var image = layer.getChildren()[0];
      layer.remove();
      stage.add(layer);

      image.dragging = true;
      image.touchPositionOnStartDragging = [touch.pageX, touch.pageY];
      image.positionOnStartDragging = [image.getPosition().x, image.getPosition().y];
      e.preventDefault();
    }
  }
}

function onTouchMove(e){
  if (e.magic){
    var layer = e.magicTarget;
    var touch = e.touch;
    if (layer){
      var image = layer.getChildren()[0];
      var touch = e.touches[0];
      if (image.dragging){
          var dx = touch.pageX - image.touchPositionOnStartDragging[0];
          var dy = touch.pageY - image.touchPositionOnStartDragging[1];

         image.setPosition(image.positionOnStartDragging[0] + dx, image.positionOnStartDragging[1] + dy);
         layer.draw();
      }
      e.preventDefault();
    }
  }
}

function onTouchEnd(e){
  if (e.magic){
    var layer = e.magicTarget;
    if (layer){
      var image = layer.getChildren()[0];
      image.dragging = false;
      e.preventDefault();
    }
  }
}


  </script>

<style type="text/css">
  #canvas{
    position: absolute;
    top: 0;
    left: 0;
    z-index: -100;
  }

  #pileBtn{
    position: absolute; 
    top: 20px; 
    left: 20px;    
    z-index: 100;
  }

  ul.dropdown-menu li a{
    text-align: center;
  }

  .dropdown-menu.open{
    display: block;
  }
</style>
  </head>
  <body>
  <div id="pileBtn" class="btn-group">
    <a class="btn btn-inverse dropdown-open" href="#">Make a pile</a>
    <a class="btn btn-inverse dropdown-toggle dropdown-open" href="#" style="min-height: 18px;"><span class="caret"></span></a>
    <ul class="dropdown-menu " style="min-width: 113px; line-height: 32px; ">
      <li><a href="javascript:makePile(1);">One</a></li>
      <li><a href="javascript:makePile(2);">Two</a></li>
      <li><a href="javascript:makePile(3);">Three</a></li>
      <li><a href="javascript:makePile(4);">Four</a></li>
    </ul>
  </div>

  <div id="canvas"></div>
  </body>
</html>
